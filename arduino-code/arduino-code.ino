#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <NewPing.h>

// --- Motor pinleri ---
#define ENA 5 //PWM olmalÄ±
#define ENB 6 //PWM olmalÄ±
#define IN1 8
#define IN2 9
#define IN3 10
#define IN4 11

// --- GPS Pinleri ve TanÄ±mlamasÄ± ---
static const int RXPin = A3;
static const int TXPin = A2;
TinyGPSPlus gps;
SoftwareSerial gpsSerial(RXPin, TXPin);

// --- Ultrasonik SensÃ¶r Pinleri ve TanÄ±mlamasÄ± ---
#define SAG_IR_PIN 4
#define SOL_IR_PIN 7
#define TRIGGER_PIN A0
#define ECHO_PIN A1
#define MAX_DISTANCE 100
NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);

// --- DeÄŸiÅŸken Gecikme SÃ¼releri (VarsayÄ±lan DeÄŸerler) ---
uint32_t ileriDelay = 300;   // VarsayÄ±lan ileri ve geri gitme sÃ¼resi (ms)
uint32_t sagaDonDelay = 400; // VarsayÄ±lan saÄŸa dÃ¶nme sÃ¼resi (ms)
uint32_t solaDonDelay = 400; // VarsayÄ±lan sola dÃ¶nme sÃ¼resi (ms)

// --- Fonksiyon prototipleri ---
void ileriGit();
void geriGit();
void solaDon();
void sagaDon();
void dur();
void kalibreliHizVer(int hiz);
void handleSettingCommand(); // Kalibrasyon ayarlarÄ± iÃ§in olan fonskiyon
bool checkObstacles();       // Engel kontrolÃ¼ yapan fonksiyon
void processMovementCommand(char command); // Hareket komutlarÄ±nÄ± iÅŸleyen fonksiyon


// --- Robot DurumlarÄ± (State Machine) ---
enum RobotState {
    STATE_IDLE,             // BoÅŸta, komut bekliyor
    STATE_FORWARD,          // Ä°leri gidiyor
    STATE_BACKWARD,         // Geri gidiyor
    STATE_TURN_LEFT,        // Sola dÃ¶nÃ¼yor
    STATE_TURN_RIGHT,       // SaÄŸa dÃ¶nÃ¼yor
    STATE_OBSTACLE_STOP     // Engel algÄ±landÄ±, durduruldu
};

RobotState currentState = STATE_IDLE;   // BaÅŸlangÄ±Ã§ durumu
unsigned long movementStartTime = 0;    // SÃ¼reli hareketin baÅŸlangÄ±Ã§ zamanÄ± (millis())
bool isStoppedByObstacle = false;       // Engel nedeniyle durdurulup durdurulmadÄ±ÄŸÄ±nÄ± izler

void setup() {
    // --- UART PortlarÄ±nÄ± BaÅŸlatma ---
    Serial.begin(9600);     // D0, D1 (Default UART)
    gpsSerial.begin(9600);

    // --- Motor pinlerinin tanÄ±mlanmasÄ± ---
    pinMode(ENA, OUTPUT); pinMode(ENB, OUTPUT);
    pinMode(IN1, OUTPUT); pinMode(IN2, OUTPUT);
    pinMode(IN3, OUTPUT); pinMode(IN4, OUTPUT);
    dur();

    // --- IR SensÃ¶r pinlerinin tanÄ±mlanmasÄ± ---
    // EÄŸer IR sensÃ¶rleriniz dahili pull-up kullanmÄ±yorsa "INPUT" yerine "INPUT_PULLUP" kullanÄ±n (uyarÄ± gÃ¶rÃ¼nce 0 olmalÄ±)
    pinMode(SAG_IR_PIN, INPUT);
    pinMode(SOL_IR_PIN, INPUT);

    Serial.println(F("ðŸ”§ Sistem BaÅŸlatÄ±ldÄ±."));
    Serial.println(F("ðŸ”§ [DEBUG] VarsayÄ±lan Gecikmeler:"));
    Serial.print(F("   Ä°leri: ")); Serial.print(ileriDelay); Serial.println(F(" ms"));
    Serial.print(F("   SaÄŸa DÃ¶n: ")); Serial.print(sagaDonDelay); Serial.println(F(" ms"));
    Serial.print(F("   Sola DÃ¶n: ")); Serial.print(solaDonDelay); Serial.println(F(" ms"));
}

void loop() {
    // --- A) GPS'den veri oku ve iÅŸle ---
    while (gpsSerial.available() > 0) {
        gps.encode(gpsSerial.read());
    }

    if (gps.location.isUpdated()) {
        Serial.print(F("Latitude: "));
        Serial.println(gps.location.lat(), 6);
        Serial.print(F("Longitude: "));
        Serial.println(gps.location.lng(), 6);
        Serial.print(F("Satellites: "));
        Serial.println(gps.satellites.value());

        // DiÄŸer GPS bilgileri (uydu, tarih, saat)
      if (gps.date.isValid()) {
        char dateStr[11];
        sprintf(dateStr, "%02d/%02d/%02d", gps.date.day(), gps.date.month(), gps.date.year() % 100);
        Serial.print(F("Date: ")); 
        Serial.println(dateStr);
      }

      if (gps.time.isValid()) {
        char timeStr[9];
        sprintf(timeStr, "%02d:%02d:%02d", gps.time.hour(), gps.time.minute(), gps.time.second());
        Serial.print(F("Time: ")); 
        Serial.println(timeStr);
      }
    }

    if(Serial.available() > 0) {
        char gelen = Serial.peek();

        if (gelen == '#') { // '#' karakteri Kalibrasyon gÃ¶nderildiÄŸini belirten karakter
            Serial.read();
            handleSettingCommand(); // Ayar komutunu iÅŸle (Engel olsa bile ayar komutu iÅŸlenebilir)
        }else if (gelen == 'A' || gelen == 'a') { // Follow me Ã¶zelliÄŸini aktifleÅŸtir
            Serial.read();
            otonomMod = true;
            Serial.println("[MODE] Otonom mod AKTÄ°F");
        } else if (gelen == 'M' || gelen == 'm') { // Follow me Ã¶zelliÄŸini kapat
            Serial.read();
            otonomMod = false;
            dur();
            Serial.println("[MODE] Manuel mod AKTÄ°F");
        }

        // --- B) Engel kontrolÃ¼ ---
        else if (checkObstacles()) { // Her loop iterasyonunda engel kontrolÃ¼ yapÄ±lÄ±r, durum ne olursa olsun.
            if (currentState != STATE_OBSTACLE_STOP) { // EÄŸer henÃ¼z engel durumuna geÃ§mediyse
                Serial.println(F("[ENGEL] Engel algÄ±landÄ±! Robot durduruluyor."));
                dur();
                currentState = STATE_OBSTACLE_STOP; // Durumu gÃ¼ncelle
                // Engel durumuna girildiÄŸinde buffer'daki hareket komutlarÄ±nÄ± temizle
                unsigned long clearStart = millis();
                while(Serial.available() > 0 && (Serial.peek() != '\n') && (millis() - clearStart < 50) ) Serial.read();
                if(Serial.available() > 0 && Serial.peek() == '\n') Serial.read(); // '\n' varsa onu da temizle

            }
            // Engel varken robot STATE_OBSTACLE_STOP durumunda kalÄ±r ve aÅŸaÄŸÄ±daki komut iÅŸleme bloÄŸunda hareket komutlarÄ± yoksayÄ±lÄ±r.

        } else { // Engel YOK
            if (currentState == STATE_OBSTACLE_STOP) { // Engel durumu yeni bittiyse
                Serial.println(F("[ENGEL] Engel kalktÄ±. Yeni komut bekleniyor."));
                currentState = STATE_IDLE; // Durumu boÅŸa al, yeni komut bekle
            }

            // Engel yokken Bluetooth'tan(Serial) gelen komutlarÄ± iÅŸle
            if (Serial.available() > 0) {
                char peekChar = Serial.peek(); // Ä°lk karaktere bak
                // Hareket komutlarÄ± ('F', 'B', 'L', 'R', 'S') sadece STATE_IDLE durumundayken veya sadece 'S' komutu iÅŸlenir
                if (currentState == STATE_IDLE && peekChar != '\n' && peekChar != '\r') {
                    char gelen = Serial.read();
                    Serial.print(F("[DEBUG] BT hareket komutu alÄ±ndÄ± (IDLE durumunda): ")); Serial.println(gelen);
                    processMovementCommand(gelen); // Hareket komutunu iÅŸle

                } else if (peekChar != '\n' && peekChar != '\r') {
                    // IDLE durumunda deÄŸilken (hareket ediyor veya engel kalkmasÄ±nÄ± bekliyor) gelen hareket komutlarÄ±nÄ± yoksay
                    char gelen = Serial.read(); // Komutu oku
                    Serial.print(F("[UYARI] Robot '"));
                    Serial.print(gelen);
                    Serial.print(F("' komutu alÄ±ndÄ± ama robot IDLE veya OBSTACLE_STOP durumunda deÄŸil (ÅŸu anki durum: "));
                    Serial.print(currentState); // Durum numarasÄ±nÄ± bas
                    Serial.println(F("). Komut yoksayÄ±lÄ±yor."));
                    // Komut sonrasÄ± buffer'Ä± temizle
                    unsigned long clearStart = millis();
                    while(Serial.available() > 0 && (Serial.peek() != '\n') && (millis() - clearStart < 50) ) Serial.read();
                    if(Serial.available() > 0 && Serial.peek() == '\n') Serial.read(); // '\n' varsa onu da temizle
                }
                else {
                    Serial.read(); // Buraya gelmez fakat ulaÅŸÄ±rsa arduino reset atmasÄ±n diye var
                }
            }
        }
    }


    // --- C) State Machine - Mevcut Duruma GÃ¶re Hareket Et ---
    unsigned long currentTime = millis();
    switch (currentState) {
        case STATE_FORWARD:
            // Belirtilen sÃ¼re geÃ§tiyse dur
            if (currentTime - movementStartTime >= ileriDelay) {
                Serial.println(F("[DEBUG] Ä°leri hareket sÃ¼resi doldu. Duruluyor."));
                dur();
                currentState = STATE_IDLE;
            }
            break;


        case STATE_TURN_LEFT:
            // Belirtilen sÃ¼re geÃ§tiyse dur
            if (currentTime - movementStartTime >= solaDonDelay) {
                Serial.println(F("[DEBUG] Sola dÃ¶nÃ¼ÅŸ sÃ¼resi doldu. Duruluyor."));
                dur();
                currentState = STATE_IDLE;
            }
            break;


        case STATE_TURN_RIGHT:
            // Belirtilen sÃ¼re geÃ§tiyse dur
            if (currentTime - movementStartTime >= sagaDonDelay) {
                Serial.println(F("[DEBUG] SaÄŸa dÃ¶nÃ¼ÅŸ sÃ¼resi doldu. Duruluyor."));
                dur();
                currentState = STATE_IDLE;
            }
            break;


        case STATE_IDLE:
            // BoÅŸta ise bir ÅŸey yapmaya gerek yok
            break;


        case STATE_BACKWARD:
            // Hand Driven'da geri gitme olmadÄ±ÄŸÄ± iÃ§in burasÄ± boÅŸ
            break;


        case STATE_OBSTACLE_STOP:
             // Zaten durmuÅŸ durumda bir ÅŸey yapmaya gerek yok
            break;
    }

    // --- Follow me: Ultrasonik SensÃ¶r ile nesne takibi ---
    if (otonomMod) {
        unsigned int distance = sonar.ping_cm();
        int Right_Value = digitalRead(SAG_IR_PIN);
        int Left_Value = digitalRead(SOL_IR_PIN);

        Serial.print("[AUTO] Distance: "); Serial.println(distance);
        Serial.print("[AUTO] RIGHT: "); Serial.println(Right_Value);
        Serial.print("[AUTO] LEFT : "); Serial.println(Left_Value);

        // Mesafeye gÃ¶re daha hÄ±zlÄ± veya yavaÅŸ Ã§alÄ±ÅŸÄ±yor
        if ((Right_Value == 1) && (distance >= 10 && distance <= 35) && (Left_Value == 1)) {
            ileriGit(80);
        } else if ((Right_Value == 1) && (distance > 35 && distance <= 60) && (Left_Value == 1)) {
            ileriGit(100);
        } else if ((Right_Value == 1) && (Left_Value == 0)) {
            solaDon(90);
        } else if ((Right_Value == 0) && (Left_Value == 1)) {
            sagaDon(90);
        } else if ((Right_Value == 1) && (Left_Value == 1)) {
            dur();
        } else if (distance >= 0 && distance < 10) {
            dur();
        }
    }

}


// --- Hareket komutlarÄ± ---
void processMovementCommand(char command) {
     // Bu fonksiyon sadece STATE_IDLE iken Ã§aÄŸrÄ±lmalÄ±
     if (currentState != STATE_IDLE) {
         Serial.println(F("[HATA] processMovementCommand fonksiyonu IDLE durumunda deÄŸilken Ã§aÄŸrÄ±ldÄ±!"));
         return; // Hata durumu, iÅŸlem yapma
     }

     switch (command) {
         // Bu kÄ±sÄ±m hand-driven-path'e ait
         case 'F': case 'f':
             Serial.println(F("[DEBUG] Komut: Ä°leri (SÃ¼reli) - BaÅŸlatÄ±lÄ±yor"));
             ileriGit(100);
             movementStartTime = millis(); // ZamanlayÄ±cÄ±yÄ± baÅŸlat
             currentState = STATE_FORWARD; // Durumu ileri olarak ayarla
             break;
         case 'B': case 'b':
             Serial.println(F("[DEBUG] Komut: Geri (SÃ¼resiz) - BaÅŸlatÄ±lÄ±yor"));
             geriGit(100);
             currentState = STATE_BACKWARD; // Durumu geri olarak ayarla
             // Åžu an hand-driven-path'te geri gitme olmadÄ±ÄŸÄ± iÃ§in iÅŸlevsiz
             break;
         case 'L': case 'l':
             Serial.println(F("[DEBUG] Komut: Sola DÃ¶n (SÃ¼reli) - BaÅŸlatÄ±lÄ±yor"));
             solaDon(100);
             movementStartTime = millis(); // ZamanlayÄ±cÄ±yÄ± baÅŸlat
             currentState = STATE_TURN_LEFT; // Durumu sola dÃ¶n olarak ayarla
             break;
         case 'R': case 'r':
             Serial.println(F("[DEBUG] Komut: SaÄŸa DÃ¶n (SÃ¼reli) - BaÅŸlatÄ±lÄ±yor"));
             sagaDon(100);
             movementStartTime = millis(); // ZamanlayÄ±cÄ±yÄ± baÅŸlat
             currentState = STATE_TURN_RIGHT; // Durumu saÄŸa dÃ¶n olarak ayarla
             break;
         case 'S': case 's':
             // Bu komut zaten loop iÃ§erisinde iÅŸleniyor fakat ne olur ne olmaz olarak burada da var
             Serial.println(F("[DEBUG] Komut: Dur - Ä°ÅŸleniyor (processMovementCommand)"));
             dur();
             currentState = STATE_IDLE;
             break;
         // Bu kÄ±sÄ±m free-ride'a ait
         case 'H': case 'h':
            ileriGit(100);
            break;
         case 'J': case 'j':
            geriGit(100);
            break;
         case 'K': case 'k':
            solaDon(100);
            break;
         case 'N': case 'n':
            sagaDon(100);
            break;
         default:
             // TanÄ±msÄ±z komutta gelrise durmasÄ± iÃ§in
             Serial.print(F("[DEBUG] TanÄ±msÄ±z hareket komutu: '")); Serial.print(command); Serial.println(F("'"));
             dur();
             currentState = STATE_IDLE;
             break;
     }
}


// --- Engel kontrolÃ¼ yapar ---
// SensÃ¶r LOW okuyorsa engel var demektir (modÃ¼lÃ¼nÃ¼ze gÃ¶re HIGH olabilir, ama ben PULL_UP kullanmanÄ±zÄ± Ã¶neririm)
bool checkObstacles() {
    bool sagEngel = digitalRead(SAG_IR_PIN) == LOW;
    bool solEngel = digitalRead(SOL_IR_PIN) == LOW;

    return sagEngel || solEngel; // Herhangi biri engel algÄ±larsa true dÃ¶n
}


// --- Kalibrasyon KomutlarÄ± ---
void handleSettingCommand() {
    // '#' karakteri zaten ana loop'ta okundu. SÄ±rada Tip (I,R,L) var.
    unsigned long startTime = millis();
    while (Serial.available() == 0 && millis() - startTime < 100); // kÄ±sa bekleme
    if (Serial.available() > 0) {
        char identifier = Serial.read();
        long newValue = Serial.parseInt(); // SayÄ±sal deÄŸeri oku. '\n' buffer'da kalÄ±r.

        Serial.print(F("[DEBUG] Ayar Komutu: Tip='")); Serial.print(identifier);
        Serial.print(F("', Okunan Ham DeÄŸer=")); Serial.println(newValue);

        // DeÄŸerin geÃ§erli olup olmadÄ±ÄŸÄ±nÄ± kontrol et
        if (newValue > 0 && newValue <= 30000) { // Ã–rn: max 30 saniye delay
            uint32_t newDelayVal = (uint32_t)newValue;
            bool updated = false;
            switch (identifier) {
                case 'I': case 'i':
                    ileriDelay = newDelayVal;
                    Serial.print(F("  -> Yeni ileriDelay: ")); Serial.println(ileriDelay);
                    updated = true;
                    break;
                case 'R': case 'r':
                    sagaDonDelay = newDelayVal;
                    Serial.print(F("  -> Yeni sagaDonDelay: ")); Serial.println(sagaDonDelay);
                    updated = true;
                    break;
                case 'L': case 'l':
                    solaDonDelay = newDelayVal;
                    Serial.print(F("  -> Yeni solaDonDelay: ")); Serial.println(solaDonDelay);
                    updated = true;
                    break;
                default:
                    Serial.print(F("[UYARI] TanÄ±msÄ±z ayar tipi: '")); Serial.print(identifier);
                    Serial.println(F("'. DeÄŸer atanmadÄ±."));
                    break;
            }
        } else {
            if (newValue <= 0) {
                Serial.println(F("[UYARI] Ayar iÃ§in geÃ§ersiz (<=0) veya parse edilemeyen deÄŸer alÄ±ndÄ±."));
            } else { // newValue > 30000
                Serial.println(F("[UYARI] Ayar deÄŸeri Ã§ok bÃ¼yÃ¼k (max 30000ms)."));
            }
        }

        // --- Buffer Temizleme ---
        unsigned long clearBufferStartTime = millis();
        while (Serial.available() > 0 && (millis() - clearBufferStartTime < 50)) { // KÄ±sa bir timeout (50ms)
            char tempChar = Serial.read();
            if (tempChar == '\n') {
                break; // '\n' bulundu, iÅŸlem tamam.
            }
        }

    } else {
        Serial.println(F("[HATA] handleSettingCommand: '#' sonrasÄ± tip karakteri bekleniyordu, buffer boÅŸ."));
        unsigned long clearBufferStartTime = millis();
        while (Serial.available() > 0 && (millis() - clearBufferStartTime < 50)) Serial.read();
    }
}


// --- Motor FonksiyonlarÄ± ---
void ileriGit(int hiz) {
    digitalWrite(IN1, LOW);  digitalWrite(IN2, HIGH);
    digitalWrite(IN3, LOW);  digitalWrite(IN4, HIGH);
    kalibreliHizVer(hiz);
}

void geriGit(int hiz) {
    digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
    digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
    kalibreliHizVer(hiz);
}

void solaDon(int hiz) {
    digitalWrite(IN1, LOW);  digitalWrite(IN2, HIGH);
    digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
    kalibreliHizVer(hiz);
}

void sagaDon(int hiz) {
    digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
    digitalWrite(IN3, LOW);  digitalWrite(IN4, HIGH);
    kalibreliHizVer(hiz);
}

void dur() {
    kalibreliHizVer(0);
}

// HÄ±z kalibrasyon fonksiyonu (BuranÄ±n dÃ¶nÃ¼ÅŸler veya ileri gitme sÃ¼resi ile alakasÄ± yoktur. Motor gÃ¼Ã§lerinin ayarlandÄ±ÄŸÄ± yerdir.)
void kalibreliHizVer(int hiz) {
    // Alt satÄ±rdaki min ve max deÄŸerleri kendiniz deneyerek bulmalÄ±sÄ±nÄ±z Ã§Ã¼nkÃ¼ motor sensÃ¶rÃ¼ ve pile gÃ¶re deÄŸiÅŸken.
    int minA = 110; // SaÄŸ motor iÃ§in minimum PWM (min deÄŸer 0, max deÄŸer 255)
    int minB = 135; // Sol motor iÃ§in minimum PWM (min deÄŸer 0, max deÄŸer 255)
    int maxA = 235; // SaÄŸ motor iÃ§in maximum PWM (min deÄŸer 0, max deÄŸer 255)
    int maxB = 255; // Sol motor iÃ§in maximum PWM (min deÄŸer 0, max deÄŸer 255)
    int pwmA, pwmB;

    if (hiz == 0) {
        pwmA = 0; // durmasÄ± iÃ§in
        pwmB = 0; // durmasÄ± iÃ§in
    } else {
        pwmA = map(hiz, 1, 100, minA, maxA);
        pwmB = map(hiz, 1, 100, minB, maxB);
    }

    pwmA = constrain(pwmA, 0, 255);
    pwmB = constrain(pwmB, 0, 255);

    analogWrite(ENA, pwmA);
    analogWrite(ENB, pwmB);
}